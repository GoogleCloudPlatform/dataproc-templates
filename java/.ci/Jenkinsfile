// Helper function to check for specific file changes
def shouldRunOnChange() {
    // If the current branch is main, always run the stages
    if (env.GIT_BRANCH_LOCAL == 'main') {
        echo "[Change Detection] Current branch is 'main'. Stage will run."
        return true
    }
    try {
        echo "[Change Detection] Checking for changes in relevant files..."
        def checkScript = '''
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
                # Not the first commit, diff against parent
                git diff --name-only HEAD~1 HEAD
            else
                # First commit, list all files in the commit (as all are "new")
                git diff-tree --no-commit-id --name-only -r HEAD
            fi | grep -Eq ".java$|java/pom.xml|java/.ci/Jenkinsfile|java/.ci/UiJenkinsfile"
        '''
        // sh(...) returns 0 if grep finds a match (success), non-zero otherwise.
        def exitCode = sh(script: checkScript, returnStatus: true)
        echo "[Change Detection] Script exit code: ${exitCode} (0 means changes detected and stage should run)"
        return exitCode == 0
    } catch (Exception e) {
        echo "[Change Detection] Error during change detection: ${e.getMessage()}. Defaulting to false (skip stage)."
        return false // Default to not running the stage if there's an error in the check
    }
}

def stageRetryCount = 3

pipeline {
    
    agent any

    environment {
        DATAPROC_TELEPORT_WEBHOOK_URL = credentials('dataproc-teleport-webhook-url')

        TEST_JDBC_URL = credentials('env-test-jdbc-url')

        GIT_BRANCH_LOCAL = sh (
            script: "echo $branchName | sed -e 's|origin/||g' | sed -e 's|^null\$|main|'",  // Remove "origin/" and set the default branch to main
            returnStdout: true
        ).trim()
        
        MAVEN_HOME = "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven"
        PATH = "$PATH:$MAVEN_HOME/bin"

        GCS_STAGING_LOCATION = sh (script: '''
            CURRENT_BRANCH=`echo $branchName | sed -e 's|origin/||g' | sed -e 's|^null\$|main|'`
            if [ $CURRENT_BRANCH != "main" ];then
            echo "$GCS_STAGING_LOCATION/$(uuidgen)"
            else
            echo $GCS_STAGING_LOCATION
            fi
            '''.stripIndent(),
            returnStdout: true
        ).trim()
    }
    stages {
        stage('Prepare Environment'){
            parallel{
                stage('Checkout') {
                    steps{
                        git branch: "${GIT_BRANCH_LOCAL}", changelog: false, poll: false, url: 'https://github.com/GoogleCloudPlatform/dataproc-templates/'    
                    }
                }
                stage('Reset Resources'){
                    steps {
                            catchError {
                                sh '''
                                    gsutil rm -r gs://dataproc-templates/integration-testing/checkpoint/KAFKATOBQ 2> /dev/null || true
                                    gsutil rm -r gs://dataproc-templates/integration-testing/output/KAFKATOGCS 2> /dev/null || true
                                    gsutil rm -r gs://dataproc-templates/integration-testing/output/KAFKATOGCS_DStream 2> /dev/null || true

cat > /tmp/employeecatalog.json << EOF
{
  "table": {"name": "employee"},
  "rowkey": "id_rowkey",
  "columns": {
    "key": {"cf": "rowkey", "col": "id_rowkey", "type": "string"},
    "name": {"cf": "personal", "col": "name", "type": "string"},
    "address": {"cf": "personal", "col": "address", "type": "string"},
    "empno": {"cf": "professional", "col": "empno", "type": "string"}
  }
}
EOF

                                    cat /tmp/employeecatalog.json
                                    gsutil cp /tmp/employeecatalog.json gs://dataproc-templates/conf/

                                '''
                            }
                    }
                }
                stage('Cluster Creation'){
                    when {
                        // Run this stage only if JOB_TYPE is not set to CLUSTER
                        expression { env.JOB_TYPE == "CLUSTER" }
                    }
                    steps{
                        sh '''
                            if gcloud dataproc clusters list --region=$REGION --project=$GCP_PROJECT | grep -q $CLUSTER; then
                                echo "Cluster $CLUSTER already exists."
                            else
                                echo "Cluster $CLUSTER does not exist. Creating now..."
                                gcloud dataproc clusters create $CLUSTER \
                                --region $REGION \
                                --subnet $SUBNET \
                                --no-address \
                                --master-machine-type n1-standard-2 \
                                --master-boot-disk-size 500 \
                                --num-workers 2 \
                                --worker-machine-type n1-standard-2 \
                                --worker-boot-disk-size 500 \
                                --image-version 2.2-debian12 \
                                --optional-components ZOOKEEPER \
                                --max-idle 1800s \
                                --project $GCP_PROJECT
                            fi
                        '''
                    }
                }
            }
        }   
        //Deploy one time so that build is copied to GCS location
        stage('JDBC TO BQ'){
        when {
                        expression { return shouldRunOnChange() }
             }
            steps {
                retry(count: stageRetryCount) {
                    sh '''
                        export JARS="gs://dataproc-templates/jars/mysql-connector-java.jar"
                        
                        cd java
                        
                        bin/start.sh \
                        -- --template JDBCTOBIGQUERY \
                        --templateProperty jdbctobq.bigquery.location=$GCP_PROJECT.dataproc_templates.jdbctobq \
                        --templateProperty jdbctobq.jdbc.url="$TEST_JDBC_URL" \
                        --templateProperty jdbctobq.jdbc.driver.class.name=com.mysql.jdbc.Driver \
                        --templateProperty jdbctobq.sql="select * from test.employee" \
                        --templateProperty jdbctobq.write.mode=overwrite \
                        --templateProperty jdbctobq.temp.gcs.bucket=dataproc-templates/integration-testing/output/JDBCTOBIGQUERY 
                    '''
                }
            }
        }
        stage('Parallel Execution 4'){
        when {
                        expression { return shouldRunOnChange() }
             }
            parallel{
                stage('DATAPLEX GCS TO BIGQUERY'){
                    steps {
                        retry(count: stageRetryCount) {
                            sh '''
                                
                                export SKIP_BUILD=true

                                
                                
                                cd java
                                
                                bin/start.sh \
                                -- --template DATAPLEXGCSTOBQ \
                                --templateProperty=project.id=$GCP_PROJECT \
                                --templateProperty=dataplex.gcs.bq.target.entity=projects/$GCP_PROJECT/locations/us-west1/lakes/dataproc-templates-test-lake/zones/dataplex-gcs-to-bq/entities/dataplex_gcs_to_bq \
                                --templateProperty=gcs.bigquery.temp.bucket.name=dataplex-gcs-to-bq \
                                --templateProperty=dataplex.gcs.bq.save.mode=overwrite \
                                --templateProperty=dataplex.gcs.bq.incremental.partition.copy=no \
                                --dataplexEntity=projects/$GCP_PROJECT/locations/us-west1/lakes/dataproc-templates-test-lake/zones/dataplex-gcs-to-bq/entities/trips_parquet
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always{
            script {
                if( env.GIT_BRANCH_LOCAL == 'main' ){
                    googlechatnotification url: DATAPROC_TELEPORT_WEBHOOK_URL,
    				message: 'Jenkins: ${JOB_NAME}\nBuild status is ${BUILD_STATUS}\nSee ${BUILD_URL}\n',
    				notifyFailure: 'true',
    				notifyAborted: 'true',
    				notifyUnstable: 'true',
    				notifyNotBuilt: 'true',
    				notifyBackToNormal: 'true'
                }
            }
            catchError {
                sh '''
                if [ $GIT_BRANCH_LOCAL != "main" ];then
                    gsutil rm -r $GCS_STAGING_LOCATION 2> /dev/null || true
                fi
                '''
            }
        }
    }
}