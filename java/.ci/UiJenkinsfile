// Helper function to check for specific file changes
def shouldRunOnChangeInUi() {
    // If the current branch is main, always run the stages
    if (env.GIT_BRANCH_LOCAL == 'main') {
        echo "[Change Detection - UI] Current branch is 'main'. Stage will run."
        return true
    }
    try {
        echo "[Change Detection - UI] Checking for changes in relevant files..."
        // Script to check for changes, handles first commit
        def checkScript = '''
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
                # Not the first commit, diff against parent
                git diff --name-only HEAD~1 HEAD
            else
                # First commit, list all files in the commit (as all are "new")
                git diff-tree --no-commit-id --name-only -r HEAD
            fi | grep -Eq ".java$|java/pom.xml|java/.ci/Jenkinsfile|java/.ci/UiJenkinsfile"
        '''
        // sh(...) returns 0 if grep finds a match (success), non-zero otherwise.
        def exitCode = sh(script: checkScript, returnStatus: true)
        echo "[Change Detection - UI] Script exit code: ${exitCode} (0 means changes detected and stage should run)"
        return exitCode == 0
    } catch (Exception e) {
        echo "[Change Detection - UI] Error during change detection: ${e.getMessage()}. Defaulting to false (skip stage)."
        return false // Default to not running the stage if there's an error in the check
    }
}

def stageRetryCount = 3

pipeline {

    agent any

    environment {
        DATAPROC_TELEPORT_WEBHOOK_URL = credentials('dataproc-teleport-webhook-url')

        TEST_JDBC_URL = credentials('env-test-jdbc-url')

        GIT_BRANCH_LOCAL = sh (
            script: "echo $branchName | sed -e 's|origin/||g' | sed -e 's|^null\$|main|'",  // Remove "origin/" and set the default branch to main
            returnStdout: true
        ).trim()

        MAVEN_HOME = "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven"
        PATH = "$PATH:$MAVEN_HOME/bin"

        JAR_FILE="dataproc-templates-1.0-SNAPSHOT.jar"
        jarPath = sh (script: '''
            CURRENT_BRANCH=`echo $branchName | sed -e 's|origin/||g' | sed -e 's|^null\$|main|'`
            if [ $CURRENT_BRANCH != "main" ];then
            echo "gs://dataproc-templates-binaries-preprod/$(uuidgen)/dataproc-templates-1.0-SNAPSHOT.jar"
            else
            echo "gs://dataproc-templates-binaries-preprod/dataproc-templates-1.0-SNAPSHOT.jar"
            fi
            '''.stripIndent(),
            returnStdout: true
        ).trim()
    }
    stages {
        //Deploy one time so that build is copied to GCS location
        stage('Reset Resources'){
                    steps {
                            catchError {
                                sh '''
                                    gcloud pubsub topics publish pubsubtogcsv3 --message='{"Name": "NewMsg", "Age": 10}'
                                    gcloud pubsub topics publish test-pubsub-bq --message='{"Name": "Another message", "Age": 18}' 2> /dev/null || true
                                '''
                            }
                    }
            }
        stage('Build Jar'){
            steps {
                sh '''
                    cd java
                    java --version
                    java_status=$?
                    if [ "$java_status" -eq 0 ];
                    then
                        printf "Java is installed, thus we are good to go"
                    else
                        printf "Java is not installed on this machine, thus we need to install that first"
                        exit 1
                    fi

                    mvn --version
                    mvn_status=$?
                    if [ "$java_status" -eq 0 ];
                    then
                        printf "Maven is installed, thus we are good to go"
                    else
                        printf "Maven is not installed on this machine, thus we need to install that first"
                        exit 1
                    fi

                    mvn clean spotless:apply install -DskipTests
                    build_status=$?

                    LOCAL_JAR_Path=./target/${JAR_FILE}

                    gsutil cp ${LOCAL_JAR_Path} ${jarPath}
                '''

                }
        }
    }
      post {
        always{
            script {
                if( env.GIT_BRANCH_LOCAL == 'main' ){
                    googlechatnotification url: DATAPROC_TELEPORT_WEBHOOK_URL,
    				message: 'Jenkins: ${JOB_NAME}\nBuild status is ${BUILD_STATUS}\nSee ${BUILD_URL}\n',
    				notifyFailure: 'true',
    				notifyAborted: 'true',
    				notifyUnstable: 'true',
    				notifyNotBuilt: 'true',
    				notifyBackToNormal: 'true'
                }
            }
            catchError {
                sh '''
                if [ $GIT_BRANCH_LOCAL != "main" ];then
                    gsutil rm -r $jarPath 2> /dev/null || true
                fi
                '''
            }
        }
    }

}
